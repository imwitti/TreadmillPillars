✅ All Feature Goals (and Known Issues)
Fix screensaver lockouts on Linux/Orange Pi.

Replace time-based routine advancement with treadmill-based (distance or time from treadmill).

Throttle ghost runner updates to match treadmill distance granularity (0.01 km).

Cap workout_data memory usage to prevent app slowdown.

Support time- or distance-based segments in routines.

Support incline per segment (routine-specified or video-aligned).

Add incline control based on video time using external JSON mapping.

Refactor code to separate logic cleanly, supporting modular updates.

Improve PB tracking efficiency by avoiding recalculation every 10 samples.

Enhance UI to show segment type and incline info in menu.

Add unit tests to verify support for mixed segment types and incline logic.

Update PB's based on parsing the finished TCX 

🧭 Execution Plan – Ordered for Stability
Each step builds toward the final feature set without breaking existing functionality.

### Step 1: 🔒 Fix Screensaver Lockouts
Why First: Prevents system interruption during testing and use.

What to Do:

Already implemented in RoutineSender.py: disable_screensaver()

✅ Just confirm this is working on Arch/Orange Pi at boot and after login.

### Step 2: 📏 Switch Routine Advancement to Distance-Based
Why Now: Fixes core timing issues and ghost sync.

What to Do:

In RunRoutine.py, modify the per-segment loop to:

Record segment_start_distance = distance_queue.get()

Calculate target_distance = segment_start_distance + speed * duration / 60

Loop with await asyncio.sleep(0.2) until treadmill-reported distance >= target.

✅ Keeps the structure but aligns timing to treadmill reality.

### Step 3: 🧠 Throttle Ghost Updates
Why: Fix ghost "jumpiness" and reduce CPU load.

What to Do:

In callback() in RunRoutine.py, only call ghost_gap_queue.put(...) if distance != last_logged_distance.

### Step 4: 🧹 Cap workout_data Size
Why: Prevent memory buildup and slowdown over long runs.

What to Do:

Add if len(workout_data) > 600: workout_data.pop(0) to the callback.

Only keep 10 minutes of data in memory for real-time processing.

### Step 5: 🪜 Refactor Segment Execution (Safe Refactor)
Why: Enables new features like distance segments and incline without breaking the loop.

What to Do:

Move segment execution logic into segment_executor.py.

Use a RoutineSegment dataclass in models.py:

python
Copy
Edit
@dataclass
class RoutineSegment:
    mode: str  # "time" or "distance"
    value: float  # minutes or km
    speed: float
    incline: Optional[float] = None
Modify RunRoutine.py to:

Call execute_segment(segment, treadmill, distance_queue, ...) for each one.

### Step 6: 🧬 Add Time/Distance Segment Type Support
Why: Users can define routines by time or distance.

What to Do:

Modify:

routines.json → Each step becomes ["distance", 1, 1.0] or ["time", 5, 0.5].

load_routines() in RoutineSender.py

generate_zwo_thumbnail.py to accept and render type and incline (optional)

Update zwo_parser.py to infer "time" by default, or detect <durationType> if present.

### Step 7: ⛰️ Add Incline to Routine Segments
Why: Let users define incline manually.

What to Do:

Add 4th value to JSON: ["time", 5, 0.5, 1.5] → +0.5 speed, 1.5% incline

In RunRoutine.py, if incline is provided, await treadmill.set_incline(incline) before segment loop.

### Step 8: 🎥 Support Incline from Video Profile File
Why: Sync incline with course terrain.

What to Do:

Add new file: video_incline_profiles.json:

json
Copy
Edit
{
  "video1.mp4": { "0": 0.5, "60": 1.0, "120": 2.5 }
}
Load this mapping in RoutineSender.py and pass it to exercise_routine()

In a separate async task or within play_video, monitor elapsed time and update treadmill incline at matching timepoints.

### Step 9: 🪞 Improve UI to Show Segment Type and Incline
Why: Show user what they’re selecting.

What to Do:

In menu_ui.py, update draw_... logic to include:

"Time" or "Distance" icons

Incline value if present

Tooltip or text overlay is fine to start with.

### Step 10: 🧪 Add Tests
Why: Prevent regressions when refactoring or adding routines.

What to Do:

Create test_routines.py

Add tests for:

Parsing mixed segment types

Handling of incline per segment

Video-based incline fallback when missing

Routine parsing from both JSON and ZWO

### Step 11: ⚙️ Optimize PB Calculations
Why: Avoid CPU spikes from recalculating every 10 samples.

What to Do:

Only recalculate PBs every 1 minute (or configurable N seconds).

Use a last_pb_check = time.time() in callback()

🧭 Summary Table
Step	Goal	Safety Level
1	Fix screensaver	✅ Already implemented
2	Distance-based segments	✅ Small changes to loop
3	Throttle ghost updates	✅ Local change
4	Cap memory usage	✅ No user impact
5	Refactor execution logic	⚠️ Requires tests
6	Add distance/time support	⚠️ JSON format change
7	Add incline per segment	⚠️ Backward compatibility
8	Add incline from video	✅ Optional feature
9	Improve UI	✅ Safe enhancement
10	Add tests	✅ No impact on runtime
11	Optimize PB checking	✅ Performance tweak

Would you like to start executing these steps together, one at a time? I can help with each part modularly as you go.

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Started well problem one the orange pie keeps logging out putting the screensaver on during the run and I have to get the keyboard to log back in to see my run problem too. The changes of the treadmill did not align to the times sit in the routine. something must be going straight Astray problem three as I progressed through the run the video became slower and slower. Obviously we are loading more and more data for some reason that is slowing the whole thing down probably as we record an array of the entire fitness data instead of just logging it as we go For I recommend we use the time from the treadmill as the time and use it to identify Change items in the routine otherwise this long leg and frames may also cause a lag and change of the routine problem. Five my distance only changes every two decimal places from the treadmill but the distance of the ghosts has more dynamic so they keep jumping in front further in front and then jump back behind as my treadmill distance changes versus their distance. They should both be updated only when treadmill distance changes.

5k he equals 35.49
Frame stalled on 3.63 distance and 29.25 time controller is no longer working

Here’s a **detailed, structured list** of all the changes you’ll need to make to your app to support:

1. **Routines that run by either time or distance**, and  
2. **Incline control either from the routine or from a separate video-aligned incline file**.

This list is organized by **intent**, **file**, and **specific change details**, so you can use it as a blueprint for implementation or to guide an LLM like GitHub Copilot.


2. Treadmill speed changes don’t match routine timing
Problem: Speed changes happen every second in a loop, not based on actual treadmill time.

Cause: Your loop waits await asyncio.sleep(1) for each second of duration, but if system is lagging (due to heavy load), this drifts from actual elapsed time.

Fix:
Replace per-second sleeps with a loop that checks actual treadmill time, like this in RunRoutine.py:

python
Copy
Edit
target_distance = 0.0
for duration, speed_increment in routine:
    await treadmill.set_speed(speed_increment)
    segment_start_distance = distance_queue.get()
    target_distance += speed_increment * (duration / 60)  # km

    while True:
        await asyncio.sleep(0.2)
        current_distance = distance_queue.get()
        if current_distance - segment_start_distance >= speed_increment * (duration / 60):
            break
Or track based on treadmill distance, not time (preferred).

3. Video slows down over time
Problem: App gets slower during the run.

Cause: workout_data grows over time, but you’re storing every sample in memory and writing incrementally to disk each second (append_tcx_trackpoint and ghost gap calcs).

Fix:

Stop recalculating PBs and ghost gaps every 10 samples.

Instead, store only the latest data point in memory and append to file in batch after the workout.

For real-time processing, limit workout_data to the last N seconds:

python
Copy
Edit
if len(workout_data) > 600:  # keep only last 10 minutes
    workout_data.pop(0)
4. Routine advancement tied to wall-clock time, not treadmill
Problem: Routine steps advance by system time, which drifts from treadmill time.

Fix:

As in (2), use treadmill distance or treadmill-supplied time if available.

Example (based on distance instead of sleep loop):

python
Copy
Edit
segment_start_distance = last_known_distance
target_distance = segment_start_distance + (duration * speed_increment / 60.0)

while True:
    await asyncio.sleep(0.2)
    current_distance = distance_queue.get()
    if current_distance >= target_distance:
        break
5. Ghost runner positions jump around
Problem: Treadmill distance updates only every 0.01 km (10m), but ghosts update per frame.

Fix:
Update ghost logic only when treadmill distance changes, like this:

python
Copy
Edit
# In callback or ghost update:
if distance != last_logged_distance:
    last_logged_distance = distance
    ghost_gap_queue.put(ghost_gaps)
Recommended Priority Fix Order:
Fix the screensaver to avoid run interruptions.

Base routine logic on treadmill distance, not time or sleep().

Throttle ghost update frequency to match treadmill distance updates.

Cap memory usage by limiting workout_data size.

Optimize video HUD frame draw, but that may not be urgent if (3) and (4) are fixed.





XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

## ✅ 1. Support Time- or Distance-Based Routines

### 🔧 Intent
Allow routines to specify whether each segment is based on **time** or **distance**, and execute accordingly.

---

### 📄 `zwo_parser.py`

#### 🔹 Change: Extend ZWO parsing to detect `<durationType>`
- **What to do**:
  - In `parse_zwo_file()`, for each workout block, check for a `<durationType>` child or attribute.
  - Default to `"time"` if not specified.
  - Return each segment as a tuple: `("time" or "distance", value, speed_increment)`.

#### 🔹 Example:
```python
routine.append(("distance", 1000, speed_increment))  # 1 km
routine.append(("time", 5, speed_increment))         # 5 minutes
```

---

### 📄 `routines.json` (and JSON routine handling)

#### 🔹 Change: Update format to include type
- **What to do**:
  - Change each routine step from `[duration, increment]` to `["time" or "distance", value, increment]`.

#### 🔹 Update parser in `RoutineSender.py` or `generate_zwo_thumbnail.py`:
- Modify `load_routines()` and `parse_json_config()` to handle the new format.

---

### 📄 `RunRoutine.py`

#### 🔹 Change: Update `exercise_routine()` to handle both types
- **What to do**:
  - For `"time"` segments: run for `duration * 60` seconds.
  - For `"distance"` segments: monitor treadmill distance and run until the delta reaches the target.

#### 🔹 Add:
- Track distance at the start of each `"distance"` segment.
- Use treadmill’s real-time distance data to determine when to move to the next segment.

---

## ✅ 2. Support Incline Control from Routine or Video-Aligned File

### 🔧 Intent
Allow incline to be:
- Defined per segment in the routine, or
- Loaded from a separate file that maps incline to video frame/time.

---

### 📄 `zwo_parser.py` and `routines.json`

#### 🔹 Change: Add incline to routine segments
- **What to do**:
  - In ZWO: extract `Cadence` or custom `<incline>` tag if present.
  - In JSON: allow optional 4th value: `["time", 5, 0.5, 2.0]` → 5 min, +0.5 km/h, 2% incline.

---

### 📄 `RunRoutine.py`

#### 🔹 Change: Apply incline per segment
- **What to do**:
  - If incline is specified in the segment, call `await treadmill.set_incline(incline)` before starting it.

---

### 📄 New File: `video_incline_profiles.json` (or similar)

#### 🔹 Format:
```json
{
  "video1.mp4": {
    "0": 1.0,
    "60": 1.5,
    "120": 2.0
  }
}
```
- Keys are seconds (or frame numbers), values are incline percentages.

---

### 📄 `RunRoutine.py` or `video_playback.py`

#### 🔹 Change: Load incline profile for selected video
- **What to do**:
  - Load incline profile based on selected video.
  - In the main loop, check elapsed time and apply incline if it changes.

---

### 📄 `RoutineSender.py`

#### 🔹 Change: Load incline profile file
- **What to do**:
  - When loading video, also load matching incline profile (if available).
  - Pass it to `exercise_routine()`.

---

## ✅ 3. Optional: UI and Display Enhancements

### 📄 `menu_ui.py`

#### 🔹 Change: Show routine type and incline info
- **What to do**:
  - Display whether a routine is time- or distance-based.
  - Show incline info if available.

---

## ✅ 4. Testing and Validation

### 📄 `test_routines.py` (if exists or create one)

#### 🔹 Add tests for:
- Mixed time/distance routines.
- Incline from routine vs video.
- Fallbacks when incline is missing.

---

## ✅ Summary Table

| Intent | File | Change |
|--------|------|--------|
| Support time/distance | `zwo_parser.py` | Parse `<durationType>` |
| 〃 | `routines.json` | Add type to each step |
| 〃 | `RunRoutine.py` | Handle both types in loop |
| Incline from routine | `zwo_parser.py`, `routines.json` | Add incline to steps |
| Incline from video | New JSON file | Map time/frame to incline |
| 〃 | `RunRoutine.py` | Apply incline during playback |
| UI support | `menu_ui.py` | Show type/incline info |

---

Would you like me to generate a sample updated routine format or a code snippet for one of these changes to get you started?

Yes — you can absolutely restructure your `RunRoutine.py` logic to make it **modular, extensible, and safer for incremental feature additions**. This is especially important when introducing new features like:

- Time vs distance-based intervals
- Multiple incline control sources
- Future enhancements (e.g., heart rate zones, music sync, etc.)

Here’s a **recommended structural refactor** that will let you add features **one by one** without breaking the app.

---

## ✅ High-Level Strategy

### 🔄 Refactor `RunRoutine.py` into:
1. **Core routine runner** (e.g. `routine_engine.py`)
2. **Segment execution logic** (e.g. `segment_executor.py`)
3. **Incline controller** (e.g. `incline_controller.py`)
4. **Data models** (e.g. `models.py` or inline `@dataclass`es)

This separation allows you to:
- Add new segment types (e.g. distance) without touching the main loop.
- Swap incline sources (routine vs video) with a plug-and-play controller.
- Keep `RunRoutine.py` as a clean orchestrator.

---

## 🧱 Suggested File Structure and Responsibilities

| File | Purpose |
|------|---------|
| `RunRoutine.py` | High-level orchestration: load config, start treadmill, call runner |
| `routine_engine.py` | Main loop: iterate over segments, call executor |
| `segment_executor.py` | Executes a single segment (time or distance) |
| `incline_controller.py` | Determines incline at any moment (from routine or video) |
| `models.py` | Define `RoutineSegment`, `InclineProfile`, etc. |

---

## 🧩 Modular Components

### 1. `models.py`

```python
from dataclasses import dataclass
from typing import Literal, Optional

@dataclass
class RoutineSegment:
    mode: Literal["time", "distance"]
    value: float  # minutes or meters
    speed_increment: float
    incline: Optional[float] = None
```

---

### 2. `segment_executor.py`

```python
async def execute_segment(treadmill, segment: RoutineSegment, current_speed, get_distance):
    if segment.incline is not None:
        await treadmill.set_incline(segment.incline)

    await treadmill.set_speed(current_speed + segment.speed_increment)

    if segment.mode == "time":
        for _ in range(int(segment.value * 60)):
            await asyncio.sleep(1)
    elif segment.mode == "distance":
        start_distance = get_distance()
        while get_distance() - start_distance < segment.value:
            await asyncio.sleep(0.5)
```

---

### 3. `incline_controller.py`

```python
class InclineController:
    def __init__(self, routine=None, video_profile=None):
        self.routine = routine
        self.video_profile = video_profile

    def get_incline(self, segment_index, elapsed_time):
        if self.video_profile:
            return self.video_profile.get(int(elapsed_time), None)
        elif self.routine:
            return self.routine[segment_index].incline
        return None
```

---

### 4. `routine_engine.py`

```python
from segment_executor import execute_segment

async def run_routine(treadmill, routine_segments, initial_speed, get_distance, incline_controller):
    for i, segment in enumerate(routine_segments):
        incline = incline_controller.get_incline(i, elapsed_time=0)  # or pass actual time
        segment.incline = incline
        await execute_segment(treadmill, segment, initial_speed, get_distance)
```

---

### 5. `RunRoutine.py`

- Load routine (ZWO or JSON)
- Convert to `RoutineSegment` list
- Load incline profile (if any)
- Call `run_routine(...)`

---

## ✅ Benefits of This Structure

- **Safe incremental development**: Add new segment types or incline sources without breaking the rest.
- **Testable**: You can unit test `execute_segment()` or `InclineController` in isolation.
- **Readable**: Each file has a single responsibility.
- **Future-proof**: Easy to add heart rate zones, music sync, etc.

---